{ exec } from child_process
{ readdir, stat, readFile, writeFile, unlink, existsSync, mkdirSync } from fs
{compile} from "@danielx/civet"
import * as path from path


civetDir .= process.argv[2] as string
compileDir .= process.argv[3] as string
console.log civetDir , compileDir

if(!civetDir or !compileDir) {
    console.log "Expected usage `node ctr.js ./path/to/civet ./path/to/output`";
    process.exit 1;
}

//probably better way to do this but idk
if(civetDir.startsWith("./")) {
    civetDir = civetDir.slice(2, civetDir.length)
}
if(civetDir.startsWith("/")) {
    civetDir = civetDir.slice(1, civetDir.length)
}
if(compileDir.startsWith("./")) {
    compileDir = compileDir.slice(2, compileDir.length)
}
if(compileDir.startsWith("/")) {
    compileDir = compileDir.slice(1, compileDir.length)
}

currentSubDir .= "/"

handleFile := (pathh: string) -> {
    t .= pathh.split("\\")
    t.shift()
    t.pop()
    targetDir := t.join("/")

    readFile(pathh, 'utf8', (err, contents) -> {
        console.log `Contents ${contents}`
        contents = contents.replace(".civet", "")
        console.log `New Contents ${contents}`
        x := pathh.split("\\")
        fileName := x.pop().split(".")[0]


        compiled := compile(contents)

        p .= x.join("/")
        console.log p 
        p = p.replace(civetDir, compileDir)
        console.log p

        if(!existsSync(p)) mkdirSync(p)

        writeFile(x.join("/").replace(civetDir, compileDir) + `/${fileName}.ts`, compiled, (err) -> {
            if(err) throw err
            
        })
    })
}


handleDir := (dir: string): void ->
    console.log "Entering Sub Dir", dir
    readDirF dir


readDirF := (dir: string) -> {
    readdir(dir, (err,files) -> {
        files.forEach((file) -> 
            pathh := path.join(dir, file)

            stat(pathh, (err,stat) -> 
                if(stat.isFile())
                    handleFile pathh
                else if (stat.isDirectory())
                    handleDir pathh
            )

        )
    
    })
}



readDirF(civetDir)
